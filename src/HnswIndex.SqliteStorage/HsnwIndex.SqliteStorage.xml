<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HnswIndex.SqliteStorage</name>
    </assembly>
    <members>
        <member name="T:Hnsw.SqliteStorage.SqliteHnswLayerStorage">
            <summary>
            SQLite-based implementation of HNSW layer storage with thread-safe operations.
            Provides persistent layer assignment storage in a SQLite database.
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswLayerStorage.Count">
            <summary>
            Gets the number of nodes with layer assignments.
            Thread-safe operation.
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswLayerStorage.IsDisposed">
            <summary>
            Gets whether the storage has been disposed.
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswLayerStorage.TableName">
            <summary>
            Gets the database table name used for layer storage.
            </summary>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.#ctor(Microsoft.Data.Sqlite.SqliteConnection,System.String)">
            <summary>
            Initializes a new instance of the SqliteHnswLayerStorage class.
            </summary>
            <param name="connection">SQLite database connection. Cannot be null.</param>
            <param name="tableName">Table name for storing layer assignments. Cannot be null or empty.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when connection or tableName is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when tableName is empty or whitespace.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.GetNodeLayer(System.Guid)">
            <summary>
            Gets the layer assignment for a specific node.
            Thread-safe operation.
            Uses caching for improved performance.
            </summary>
            <param name="nodeId">Node identifier.</param>
            <returns>The layer number for the node, or 0 if not found.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.SetNodeLayer(System.Guid,System.Int32)">
            <summary>
            Sets the layer assignment for a specific node.
            Thread-safe operation.
            Immediately persists to database and updates cache.
            </summary>
            <param name="nodeId">Node identifier. Cannot be Guid.Empty.</param>
            <param name="layer">Layer number. Minimum: 0, Maximum: 63.</param>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is Guid.Empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when layer is outside valid range.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.RemoveNodeLayer(System.Guid)">
            <summary>
            Removes the layer assignment for a specific node.
            Thread-safe operation.
            Immediately removes from database and cache.
            No effect if the node doesn't exist.
            </summary>
            <param name="nodeId">Node identifier.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.GetAllNodeLayers">
            <summary>
            Gets all node layer assignments.
            Thread-safe operation.
            Returns a copy to prevent external modification.
            </summary>
            <returns>Dictionary mapping node IDs to layer numbers.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.Clear">
            <summary>
            Removes all layer assignments.
            Thread-safe operation.
            Clears both database and cache.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.ContainsNode(System.Guid)">
            <summary>
            Checks if a layer assignment exists for the specified node.
            Thread-safe operation.
            </summary>
            <param name="nodeId">Node identifier to check.</param>
            <returns>true if a layer assignment exists; otherwise, false.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.GetAllNodeIds">
            <summary>
            Gets all node IDs that have layer assignments.
            Thread-safe operation.
            Returns a copy to prevent external modification.
            </summary>
            <returns>Collection of node IDs with layer assignments.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.RefreshCache">
            <summary>
            Forces a reload of the cache from the database.
            Thread-safe operation.
            Useful for synchronizing with external database changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.Dispose">
            <summary>
            Disposes of the storage resources.
            </summary>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswLayerStorage.Dispose(System.Boolean)">
            <summary>
            Disposes of the storage resources.
            </summary>
            <param name="disposing">true if disposing managed resources; otherwise, false.</param>
        </member>
        <member name="T:Hnsw.SqliteStorage.SqliteHnswNode">
            <summary>
            SQLite-based implementation of HNSW node with thread-safe operations.
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswNode.Id">
            <summary>
            Gets the unique identifier of the node.
            Cannot be Guid.Empty.
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswNode.Vector">
            <summary>
            Gets the vector associated with the node.
            Never null. Vector dimension typically ranges from 1 to 4096.
            All values must be finite (not NaN or Infinity).
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswNode.IsDisposed">
            <summary>
            Gets whether this node has been disposed.
            </summary>
        </member>
        <member name="P:Hnsw.SqliteStorage.SqliteHnswNode.IsDirty">
            <summary>
            Gets whether the node has unsaved changes.
            </summary>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.#ctor(System.Guid,System.Collections.Generic.List{System.Single},Microsoft.Data.Sqlite.SqliteConnection,System.String)">
            <summary>
            Initializes a new instance of the SqliteHnswNode class.
            </summary>
            <param name="id">Node identifier. Cannot be Guid.Empty.</param>
            <param name="vector">Vector data. Cannot be null or empty. All values must be finite.</param>
            <param name="connection">SQLite database connection. Cannot be null.</param>
            <param name="tableName">Table name for storing neighbors. Cannot be null or empty.</param>
            <exception cref="T:System.ArgumentException">Thrown when id is Guid.Empty or vector contains invalid values.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when vector, connection, or tableName is null.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.GetNeighbors">
            <summary>
            Gets a copy of the node's neighbors organized by layer.
            Thread-safe operation.
            Returns a dictionary where keys are layer numbers (0 to MaxLayers-1) and values are sets of neighbor IDs.
            Never returns null. Returns an empty dictionary if no neighbors exist.
            </summary>
            <returns>A copy of the neighbors dictionary.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.AddNeighbor(System.Int32,System.Guid)">
            <summary>
            Adds a neighbor connection at the specified layer.
            Thread-safe operation. Idempotent - adding the same neighbor multiple times has no additional effect.
            </summary>
            <param name="layer">The layer number. Minimum: 0, Maximum: 63.</param>
            <param name="NeighborGUID">The ID of the neighbor to add. Cannot be Guid.Empty or equal to this node's ID.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when layer is negative or exceeds maximum.</exception>
            <exception cref="T:System.ArgumentException">Thrown when NeighborGUID is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.RemoveNeighbor(System.Int32,System.Guid)">
            <summary>
            Removes a neighbor connection at the specified layer.
            Thread-safe operation. No effect if the neighbor doesn't exist.
            Removes the layer entry if it becomes empty after neighbor removal.
            </summary>
            <param name="layer">The layer number. Minimum: 0, Maximum: 63.</param>
            <param name="NeighborGUID">The ID of the neighbor to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when layer is negative or exceeds maximum.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.GetNeighborCount(System.Int32)">
            <summary>
            Gets the number of neighbors at a specific layer.
            Thread-safe operation.
            </summary>
            <param name="layer">The layer number. Minimum: 0, Maximum: 63.</param>
            <returns>The number of neighbors at the specified layer, or 0 if the layer has no neighbors.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when layer is negative or exceeds maximum.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.GetTotalNeighborCount">
            <summary>
            Gets the total number of neighbors across all layers.
            Thread-safe operation.
            </summary>
            <returns>The total number of neighbors.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.HasNeighbor(System.Int32,System.Guid)">
            <summary>
            Checks if a specific neighbor exists at the given layer.
            Thread-safe operation.
            </summary>
            <param name="layer">The layer number. Minimum: 0, Maximum: 63.</param>
            <param name="NeighborGUID">The neighbor ID to check.</param>
            <returns>true if the neighbor exists at the specified layer; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when layer is negative or exceeds maximum.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.Flush">
            <summary>
            Forces a save of neighbor data to the database.
            Thread-safe operation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the node has been disposed.</exception>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.Dispose">
            <summary>
            Disposes of the node's resources.
            </summary>
        </member>
        <member name="M:Hnsw.SqliteStorage.SqliteHnswNode.Dispose(System.Boolean)">
            <summary>
            Disposes of the node's resources.
            </summary>
            <param name="disposing">true if disposing managed resources; otherwise, false.</param>
        </member>
        <member name="T:HnswIndex.SqliteStorage.SqliteHnswStorage">
            <summary>
            SQLite-based implementation of HNSW storage with thread-safe operations.
            Provides persistent storage for HNSW nodes in a SQLite database.
            </summary>
        </member>
        <member name="P:HnswIndex.SqliteStorage.SqliteHnswStorage.EntryPoint">
            <summary>
            Gets or sets the entry point node ID.
            Can be null when storage is empty.
            When setting, the value must either be null or correspond to an existing node ID.
            Thread-safe property.
            Default: null.
            </summary>
        </member>
        <member name="P:HnswIndex.SqliteStorage.SqliteHnswStorage.IsEmpty">
            <summary>
            Gets whether the storage is empty (contains no nodes).
            Thread-safe property.
            </summary>
        </member>
        <member name="P:HnswIndex.SqliteStorage.SqliteHnswStorage.IsDisposed">
            <summary>
            Gets whether the storage has been disposed.
            </summary>
        </member>
        <member name="P:HnswIndex.SqliteStorage.SqliteHnswStorage.DatabasePath">
            <summary>
            Gets the database file path.
            </summary>
        </member>
        <member name="P:HnswIndex.SqliteStorage.SqliteHnswStorage.Connection">
            <summary>
            Gets the SQLite database connection.
            </summary>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqliteHnswStorage class.
            </summary>
            <param name="databasePath">Path to the SQLite database file. Cannot be null or empty.</param>
            <param name="createIfNotExists">Whether to create the database if it doesn't exist. Default: true.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when databasePath is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when database doesn't exist and createIfNotExists is false.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqliteHnswStorage class with custom table names.
            </summary>
            <param name="databasePath">Path to the SQLite database file. Cannot be null or empty.</param>
            <param name="nodesTableName">Name for the nodes table. Cannot be null or empty.</param>
            <param name="neighborsTableName">Name for the neighbors table. Cannot be null or empty.</param>
            <param name="metadataTableName">Name for the metadata table. Cannot be null or empty.</param>
            <param name="createIfNotExists">Whether to create the database if it doesn't exist. Default: true.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any parameter is null or empty.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the number of nodes in storage.
            Thread-safe operation.
            Minimum: 0, Maximum: int.MaxValue (limited by available disk space).
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The number of nodes in storage.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.AddNodeAsync(System.Guid,System.Collections.Generic.List{System.Single},System.Threading.CancellationToken)">
            <summary>
            Adds a new node to storage.
            Thread-safe operation.
            If this is the first node and EntryPoint is null, it becomes the entry point.
            If a node with the same ID already exists, it will be replaced.
            </summary>
            <param name="id">Node identifier. Cannot be Guid.Empty.</param>
            <param name="vector">Vector data. Cannot be null or empty. All values must be finite.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentException">Thrown when id is Guid.Empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when vector is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.AddNodesAsync(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Adds multiple nodes to storage in a batch operation.
            Thread-safe operation.
            More efficient than calling AddNodeAsync multiple times.
            If this is the first batch and EntryPoint is null, the first node becomes the entry point.
            </summary>
            <param name="nodes">Dictionary mapping node IDs to their vector data. Cannot be null.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when nodes is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any node ID is Guid.Empty or vector is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.RemoveNodeAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Removes a node from storage.
            Thread-safe operation.
            If the removed node was the entry point, a new entry point is automatically selected.
            No effect if the node doesn't exist.
            </summary>
            <param name="id">Node identifier to remove.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.RemoveNodesAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Removes multiple nodes from storage in a batch operation.
            Thread-safe operation.
            More efficient than calling RemoveNodeAsync multiple times.
            If any removed node was the entry point, a new entry point is automatically selected.
            </summary>
            <param name="ids">Collection of node IDs to remove. Cannot be null.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when ids is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.GetNodeAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a node by ID.
            Thread-safe operation.
            Uses caching for improved performance.
            </summary>
            <param name="id">Node identifier.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The requested node.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the node doesn't exist.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.GetNodesAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Gets multiple nodes by their IDs in a batch operation.
            Thread-safe operation.
            More efficient than calling GetNodeAsync multiple times.
            Uses caching for improved performance.
            </summary>
            <param name="ids">Collection of node IDs to retrieve. Cannot be null.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Dictionary mapping node IDs to their corresponding nodes. Only includes nodes that exist.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when ids is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.TryGetNodeAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Tries to get a node by ID.
            Thread-safe operation.
            Uses caching for improved performance.
            </summary>
            <param name="id">Node identifier.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A tuple indicating success and the node if found.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.GetAllNodeIdsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all node IDs in storage.
            Thread-safe operation.
            Returns a new list to prevent external modification.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A collection of all node IDs in storage.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.ContainsNode(System.Guid)">
            <summary>
            Checks if a node exists in storage.
            Thread-safe operation.
            </summary>
            <param name="id">Node identifier to check.</param>
            <returns>true if the node exists; otherwise, false.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.Clear">
            <summary>
            Clears all nodes from storage.
            Thread-safe operation.
            Also clears the entry point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.Flush">
            <summary>
            Forces a flush of all cached data to the database.
            Thread-safe operation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.Dispose">
            <summary>
            Disposes of the storage and all contained nodes.
            </summary>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.Dispose(System.Boolean)">
            <summary>
            Disposes of the storage resources.
            </summary>
            <param name="disposing">true if disposing managed resources; otherwise, false.</param>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.SetNodeLayer(System.Guid,System.Int32)">
            <summary>
            Sets the layer for a node in the database.
            Thread-safe operation.
            </summary>
            <param name="nodeId">Node identifier.</param>
            <param name="layer">Layer number.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.GetNodeLayer(System.Guid)">
            <summary>
            Gets the layer for a node from the database.
            Thread-safe operation.
            </summary>
            <param name="nodeId">Node identifier.</param>
            <returns>The layer number, or 0 if not found.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
        <member name="M:HnswIndex.SqliteStorage.SqliteHnswStorage.GetAllNodeLayers">
            <summary>
            Gets all node layer assignments from the database.
            Thread-safe operation.
            </summary>
            <returns>Dictionary mapping node IDs to layer numbers.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the storage has been disposed.</exception>
        </member>
    </members>
</doc>
